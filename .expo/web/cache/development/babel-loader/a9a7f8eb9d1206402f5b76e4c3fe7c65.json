{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/alialtabtabae/Downloads/recipes-app-react-native/src/screens/Fields/FieldsScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport styles from \"./styles\";\nimport { categories } from \"../../data/dataArrays\";\nimport { getNumberOfRecipes } from \"../../data/MockDataAPI\";\nimport fieldStore from \"../../../stores/fieldStore\";\n\nvar FieldsScreen = function (_React$Component) {\n  _inherits(FieldsScreen, _React$Component);\n\n  var _super = _createSuper(FieldsScreen);\n\n  function FieldsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FieldsScreen);\n\n    _this = _super.call(this, props);\n\n    _this.onPressField = function (item) {\n      var title = item.fieldname;\n      var fields = item;\n\n      _this.props.navigation.navigate('RecipesList', {\n        fields: fields,\n        title: title\n      });\n    };\n\n    _this.renderField = function (_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableHighlight, {\n        underlayColor: \"rgba(73,182,77,0.9)\",\n        onPress: function onPress() {\n          return _this.onPressField(item);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 5\n        }\n      }, React.createElement(View, {\n        style: styles.fieldsItemContainer,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.fieldsName,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, item.fieldname), React.createElement(Text, {\n        style: styles.fieldsName,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, item.location), React.createElement(Text, {\n        style: styles.fieldsName,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, item.price), React.createElement(Text, {\n        style: styles.fieldsName,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, item.capacity), React.createElement(Text, {\n        style: styles.fieldsInfo,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, getNumberOfRecipes(item.id), \" recipes\")));\n    };\n\n    return _this;\n  }\n\n  _createClass(FieldsScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, React.createElement(FlatList, {\n        data: fieldStore.fields,\n        renderItem: this.renderField,\n        keyExtractor: function keyExtractor(item) {\n          return \"\" + item.id;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return FieldsScreen;\n}(React.Component);\n\nFieldsScreen.navigationOptions = {\n  title: 'Fields'\n};\nexport { FieldsScreen as default };","map":{"version":3,"sources":["/Users/alialtabtabae/Downloads/recipes-app-react-native/src/screens/Fields/FieldsScreen.js"],"names":["React","styles","categories","getNumberOfRecipes","fieldStore","FieldsScreen","props","onPressField","item","title","fieldname","fields","navigation","navigate","renderField","fieldsItemContainer","fieldsName","location","price","capacity","fieldsInfo","id","Component","navigationOptions"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAQA,OAAOC,MAAP;AACA,SAASC,UAAT;AACA,SAASC,kBAAT;AACA,OAAOC,UAAP;;IAEqBC,Y;;;;;AAKnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAInBC,YAJmB,GAIJ,UAAAC,IAAI,EAAI;AACrB,UAAMC,KAAK,GAAGD,IAAI,CAACE,SAAnB;AACA,UAAMC,MAAM,GAAGH,IAAf;;AACA,YAAKF,KAAL,CAAWM,UAAX,CAAsBC,QAAtB,CAA+B,aAA/B,EAA8C;AAAEF,QAAAA,MAAM,EAANA,MAAF;AAAUF,QAAAA,KAAK,EAALA;AAAV,OAA9C;AACD,KARkB;;AAAA,UAUnBK,WAVmB,GAUL;AAAA,UAAGN,IAAH,QAAGA,IAAH;AAAA,aACZ,oBAAC,kBAAD;AAAoB,QAAA,aAAa,EAAC,qBAAlC;AAAwD,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAKD,YAAL,CAAkBC,IAAlB,CAAN;AAAA,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEP,MAAM,CAACc,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEd,MAAM,CAACe,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCR,IAAI,CAACE,SAAtC,CADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAET,MAAM,CAACe,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCR,IAAI,CAACS,QAAtC,CAFF,EAGE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEhB,MAAM,CAACe,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCR,IAAI,CAACU,KAAtC,CAHF,EAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEjB,MAAM,CAACe,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCR,IAAI,CAACW,QAAtC,CAJF,EAKE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAElB,MAAM,CAACmB,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCjB,kBAAkB,CAACK,IAAI,CAACa,EAAN,CAAnD,aALF,CADF,CADY;AAAA,KAVK;;AAAA;AAElB;;;;WAoBD,kBAAS;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEjB,UAAU,CAACO,MADnB;AAEE,QAAA,UAAU,EAAE,KAAKG,WAFnB;AAGE,QAAA,YAAY,EAAE,sBAAAN,IAAI;AAAA,sBAAOA,IAAI,CAACa,EAAZ;AAAA,SAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD;;;;EArCuCrB,KAAK,CAACsB,S;;AAA3BjB,Y,CACZkB,iB,GAAoB;AACzBd,EAAAA,KAAK,EAAE;AADkB,C;SADRJ,Y","sourcesContent":["import React from 'react';\nimport {\n  FlatList,\n  Text,\n  View,\n  Image,\n  TouchableHighlight\n} from 'react-native';\nimport styles from './styles';\nimport { categories } from '../../data/dataArrays';\nimport { getNumberOfRecipes } from '../../data/MockDataAPI';\nimport fieldStore from '../../../stores/fieldStore';\n\nexport default class FieldsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Fields'\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  onPressField = item => {\n    const title = item.fieldname;\n    const fields = item;\n    this.props.navigation.navigate('RecipesList', { fields, title });\n  };\n\n  renderField = ({ item }) => (\n    <TouchableHighlight underlayColor='rgba(73,182,77,0.9)' onPress={() => this.onPressField(item)}>\n      <View style={styles.fieldsItemContainer}>\n        <Text style={styles.fieldsName}>{item.fieldname}</Text>\n        <Text style={styles.fieldsName}>{item.location}</Text>\n        <Text style={styles.fieldsName}>{item.price}</Text>\n        <Text style={styles.fieldsName}>{item.capacity}</Text>\n        <Text style={styles.fieldsInfo}>{getNumberOfRecipes(item.id)} recipes</Text>\n      </View>\n    </TouchableHighlight>\n  );\n\n  render() {\n    return (\n      <View>\n        <FlatList\n          data={fieldStore.fields}\n          renderItem={this.renderField}\n          keyExtractor={item => `${item.id}`}\n        />\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}